package pkg

import (
	"fmt"
	"io"
	"os"
)

func WriteFile(path string, content []byte) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	// 将字符串写入文件
	_, err = file.Write(content)
	if err != nil {
		return err
	}
	return nil
}

// 读取最后 N 行（最后一个 \n 往前查找，确保获取的是完整行）
func ReadLastNLines(file *os.File, n int) (lines []string, endPos int64, err error) {
	fileInfo, err := file.Stat()
	if err != nil {
		return
	}
	fileSize := fileInfo.Size()

	char := make([]byte, 1)
	var line []byte
	pos := fileSize
	endPos = pos
	var foundEndPos bool

	for {
		pos--

		_, err = file.Seek(pos, io.SeekStart)
		if err == nil {
			_, err = file.Read(char)
		}

		if char[0] == '\n' || err != nil {
			if !foundEndPos {
				foundEndPos = true
				endPos = pos + 1
			} else {
				if len(line) != 0 {
					// lines = append([]string{string(line)}, lines...)
					lines = append([]string{fmt.Sprintf(`%d"%s`, pos+1, string(line))}, lines...) // 如果不要在前面加上 pos，可以直接使用这个（替换上一行）
					if len(lines) == n {
						return
					}
				}
			}
			line = nil

			// 到头退出
			if err != nil {
				return
			}
		} else {
			line = append([]byte{char[0]}, line...)
		}
	}
}

// 从指定位置，读取到最后一个 \n 为止, 剩余没有 \n 的部分，留着之后读取
func ReadLinesStartPos(file *os.File, startPos int64) (lines []string, endPos int64, err error) {
	char := make([]byte, 1)
	var line []byte
	lineStartPos := startPos
	pos := startPos
	endPos = pos

	for {
		_, err = file.Seek(pos, io.SeekStart)
		if err == nil {
			_, err = file.Read(char)
		}
		if err != nil {
			return
		}
		pos++

		if char[0] == '\n' {
			if len(line) != 0 {
				lines = append(lines, fmt.Sprintf(`%d"%s`, lineStartPos, string(line)))
				// lines = append(lines, string(line)) // 如果不要在前面加上 pos，可以直接使用这个（替换上一行）
			}
			lineStartPos = pos
			endPos = pos
			line = nil
		} else {
			line = append(line, char[0])
		}
	}
}
